{"version":3,"sources":["components/Job.js","components/JobModal.js","components/Jobs.js","App.js","serviceWorker.js","index.js"],"names":["Job","job","onClick","Paper","className","Typography","variant","title","compoany","location","created_at","split","slice","join","Transition","React","forwardRef","props","ref","Slide","direction","JobModal","open","handleClose","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","company","alt","src","company_logo","DialogContent","DialogContentText","dangerouslySetInnerHTML","__html","description","DialogActions","Button","color","href","url","target","rel","Jobs","jobs","useState","activeStep","setActiveStep","numJobs","length","numPages","Math","ceil","jobsOnPage","setOpen","selectedJob","selectJob","component","map","i","key","MobileStepper","steps","position","nextButton","size","prevActiveStep","disabled","backButton","updateCb","a","fetch","res","json","App","jobList","updateJobs","useEffect","fetchJobs","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gVAGe,SAASA,EAAT,GAA+B,IAAhBC,EAAe,EAAfA,IAAKC,EAAU,EAAVA,QAC/B,OACI,kBAACC,EAAA,EAAD,CAAOC,UAAU,MAAMF,QAASA,GAC5B,6BACI,kBAACG,EAAA,EAAD,CAAYC,QAAQ,MAAML,EAAIM,OAC9B,kBAACF,EAAA,EAAD,CAAYC,QAAQ,MAAML,EAAIO,UAC9B,kBAACH,EAAA,EAAD,CAAYC,QAAQ,MAAML,EAAIQ,WAGlC,6BACI,kBAACJ,EAAA,EAAD,KAAaJ,EAAIS,WAAWC,MAAM,KAAKC,MAAM,EAAG,GAAGC,KAAK,Q,0DCJlEC,EAAaC,IAAMC,YAAW,SAAoBC,EAAOC,GAC3D,OAAO,kBAACC,EAAA,EAAD,eAAOC,UAAU,KAAKF,IAAKA,GAASD,OAGhC,SAASI,EAAT,GAA+C,IAA3BpB,EAA0B,EAA1BA,IAAKqB,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YAC1C,OAAKtB,EAAIM,MAKL,6BACI,kBAACiB,EAAA,EAAD,CACIF,KAAMA,EACNG,oBAAqBX,EACrBY,aAAW,EACXC,QAASJ,EACTK,kBAAgB,2BAChBC,mBAAiB,kCAEjB,kBAACC,EAAA,EAAD,CAAaC,GAAG,4BACX9B,EAAIM,MADT,MACmBN,EAAI+B,QACnB,yBAAK5B,UAAU,cAAc6B,IAAKhC,EAAIM,MAAO2B,IAAKjC,EAAIkC,gBAE1D,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIN,GAAG,iCACHO,wBAAyB,CAACC,OAAQtC,EAAIuC,gBAE9C,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQxC,QAASqB,EAAaoB,MAAM,WAApC,SAGA,uBAAGC,KAAM3C,EAAI4C,IAAKC,OAAO,SAASC,IAAI,uBAClC,kBAACL,EAAA,EAAD,CAAQC,MAAM,WAAd,aA3BT,8BCLA,SAASK,EAAT,GAA0B,IAATC,EAAQ,EAARA,KAAQ,EAEAlC,IAAMmC,SAAS,GAFf,mBAE7BC,EAF6B,KAEjBC,EAFiB,KAI9BC,EAAUJ,EAAKK,OACfC,EAAWC,KAAKC,KAAKJ,EAAU,IAC/BK,EAAaT,EAAKrC,MAAmB,GAAbuC,EAA+B,GAAbA,EAAmB,IAN/B,EAgBZpC,IAAMmC,UAAS,GAhBH,mBAgB7B5B,EAhB6B,KAgBvBqC,EAhBuB,OAiBH5C,IAAMmC,SAAS,IAjBZ,mBAiB7BU,EAjB6B,KAiBhBC,EAjBgB,KA4BpC,OACI,yBAAKzD,UAAU,QACX,kBAACiB,EAAD,CAAUC,KAAMA,EAAMrB,IAAK2D,EAAarC,YAP5B,WAChBoC,GAAQ,MAOJ,kBAACtD,EAAA,EAAD,CAAYC,QAAQ,KAAKwD,UAAU,MAAnC,wBAGA,kBAACzD,EAAA,EAAD,CAAYC,QAAQ,KAAKwD,UAAU,MAAnC,SACWT,EADX,SAIIK,EAAWK,KAAI,SAAC9D,EAAK+D,GAAN,OAAY,kBAAChE,EAAD,CAAKC,IAAKA,EAAKgE,IAAKD,EAAG9D,QAAS,WAlBnEyD,GAAQ,GAoBIE,EAAU5D,SAGlB,qCACUkD,EAAa,EADvB,OAC8BI,GAE9B,kBAACW,EAAA,EAAD,CACI5D,QAAQ,WACR6D,MAAOZ,EACPa,SAAS,SACTjB,WAAYA,EACZkB,WACI,kBAAC3B,EAAA,EAAD,CAAQ4B,KAAK,QAAQpE,QA5ClB,WACfkD,GAAc,SAACmB,GAAD,OAAoBA,EAAiB,MA2CGC,SAAUrB,IAAeI,EAAW,GAA9E,OAEI,kBAAC,IAAD,OAGRkB,WACI,kBAAC/B,EAAA,EAAD,CAAQ4B,KAAK,QAAQpE,QA9ClB,WACfkD,GAAc,SAACmB,GAAD,OAAoBA,EAAiB,MA6CGC,SAAyB,IAAfrB,GAChD,kBAAC,IAAD,MADJ,W,iEC9DpB,WAAyBuB,GAAzB,iBAAAC,EAAA,sEACoBC,IAAM,8BAD1B,cACQC,EADR,gBAEqBA,EAAIC,OAFzB,OAEQA,EAFR,OAGEJ,EAASI,GAHX,4C,sBAqBeC,MAff,WAAgB,IAAD,EAEiBhE,IAAMmC,SAAS,IAFhC,mBAEN8B,EAFM,KAEGC,EAFH,KAQb,OAJAlE,IAAMmE,WAAU,Y,oCACdC,CAAUF,KACT,IAGD,yBAAK7E,UAAU,OACb,kBAAC4C,EAAD,CAAMC,KAAM+B,MCVEI,QACW,cAA7BC,OAAO5E,SAAS6E,UAEe,UAA7BD,OAAO5E,SAAS6E,UAEhBD,OAAO5E,SAAS6E,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d20d246d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Typography, Paper } from '@material-ui/core';\r\n\r\nexport default function Job ({job, onClick}) {\r\n    return (\r\n        <Paper className='job' onClick={onClick}>\r\n            <div>\r\n                <Typography variant='h5'>{job.title}</Typography>\r\n                <Typography variant='h6'>{job.compoany}</Typography>\r\n                <Typography variant='h6'>{job.location}</Typography>\r\n            </div>\r\n\r\n            <div>\r\n                <Typography>{job.created_at.split(' ').slice(0, 4).join(' ')}</Typography>\r\n            </div>\r\n        </Paper>\r\n    )\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function JobModal({ job, open, handleClose }) {\r\n    if (!job.title) {\r\n        return <div />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title\">\r\n                    {job.title} - {job.company}\r\n                    <img className='detail-logo' alt={job.title} src={job.company_logo} />\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText \r\n                        id=\"alert-dialog-slide-description\" \r\n                        dangerouslySetInnerHTML={{__html: job.description}} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Close\r\n                    </Button>\r\n                    <a href={job.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <Button color=\"primary\">\r\n                            Apply\r\n                        </Button>\r\n                    </a>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport Button from '@material-ui/core/Button';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\n\r\nimport Job from './Job';\r\nimport JobModal from './JobModal';\r\n\r\nexport default function Jobs ({ jobs }) {\r\n    // Pagination\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    \r\n    const numJobs = jobs.length;\r\n    const numPages = Math.ceil(numJobs / 10);\r\n    const jobsOnPage = jobs.slice(activeStep * 10, (activeStep * 10) + 10)\r\n    \r\n    const handleNext = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    };\r\n    \r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n    // Modal\r\n    const [open, setOpen] = React.useState(false);\r\n    const [selectedJob, selectJob] = React.useState({});\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    \r\n    \r\n    return (\r\n        <div className=\"jobs\">\r\n            <JobModal open={open} job={selectedJob} handleClose={handleClose}/>\r\n            <Typography variant='h4' component=\"h1\">\r\n                Remote Software Jobs\r\n            </Typography>\r\n            <Typography variant='h6' component=\"h2\">\r\n                Found {numJobs} Jobs\r\n            </Typography>\r\n            {\r\n                jobsOnPage.map((job, i) => <Job job={job} key={i} onClick={() => {\r\n                    handleClickOpen();\r\n                    selectJob(job);\r\n                }}/>)\r\n            }\r\n            <div>\r\n                Page {activeStep + 1} of {numPages}\r\n            </div>\r\n            <MobileStepper\r\n                variant=\"progress\"\r\n                steps={numPages}\r\n                position=\"static\"\r\n                activeStep={activeStep}\r\n                nextButton={\r\n                    <Button size=\"small\" onClick={handleNext} disabled={activeStep === numPages - 1}>\r\n                        Next\r\n                        <KeyboardArrowRight />\r\n                    </Button>\r\n                }\r\n                backButton={\r\n                    <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n                        <KeyboardArrowLeft />\r\n                        Back\r\n                    </Button>\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\n\nimport Jobs from './components/Jobs';\nimport fetch from 'node-fetch';\n\nasync function fetchJobs(updateCb) {\n  const res = await fetch('http://localhost:8080/jobs');\n  const json = await res.json();\n  updateCb(json);\n}\n\nfunction App() {\n\n  const [jobList, updateJobs] = React.useState([]);\n\n  React.useEffect(() => {\n    fetchJobs(updateJobs);\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Jobs jobs={jobList}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}